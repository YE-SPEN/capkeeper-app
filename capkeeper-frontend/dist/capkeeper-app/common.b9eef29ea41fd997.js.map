{"version":3,"file":"common.b9eef29ea41fd997.js","mappings":"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","names":["PlayerService","constructor","http","this","getAllPlayers","league_id","get","getPlayerByID","player_id","params","HttpParams","set","getDraftByYear","year","url","getProtectionSheet","team_id","i0","i1","factory","Éµfac","providedIn","SortingService","sortColumn","sortDirection","sort","data","column","direction","a","b","valueA","valueB","toggleSort","secondaryColumn","ToastComponent_div_0_div_1_Template","ToastComponent_div_0_div_2_Template","_r1","ctx_r1","dismissToast","isSuccessful","message","ToastComponent","isVisible","ngOnInit","autoDismiss","ngOnDestroy","timeoutHandle","clearTimeout","timeout","setTimeout","selectors","inputs","decls","vars","consts","template","rf","ctx","ToastComponent_div_0_Template","ToastService","appRef","injector","showToast","componentRef","createComponent","environmentInjector","instance","attachView","hostView","domElem","rootNodes","document","body","appendChild","detachView","remove"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/services/player.service.ts","./src/app/services/sorting.service.ts","./src/app/components/toast/toast.component.ts","./src/app/services/toast-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Player, Draft_Pick } from '../types';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PlayerService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  getAllPlayers(league_id: string): Observable<{ players: Player[] }> {\r\n    const url = `api/${league_id}/players`;\r\n    return this.http.get<{ players: Player[] }>(url);\r\n  }\r\n\r\n  getPlayerByID(player_id: string): Observable<{ player: Player }> {\r\n    const url = `api/get-player`;\r\n    const params = new HttpParams().set('id', player_id);\r\n    return this.http.get<{ player: Player }>(url, { params });\r\n  }\r\n  \r\n  getDraftByYear(league_id: string, year: number): Observable<{ draft: Draft_Pick[] }> {\r\n    const url = `api/${league_id}/draft`;\r\n    const params = new HttpParams().set('year', year);\r\n    return this.http.get<{ draft: Draft_Pick[] }>(url, { params });\r\n  }\r\n\r\n  getProtectionSheet(league_id: string, team_id: string): Observable<{ players: Player[] }> {\r\n    const url = `api/${league_id}/${team_id}/protection-sheet`;\r\n    return this.http.get<{ players: Player[] }>(url);\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Team, Player } from '../types';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SortingService {\r\n  sortColumn: string | null = 'last_name';\r\n  sortDirection: 'asc' | 'desc' = 'asc';  \r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) { }\r\n\r\n  sort(data: any[], column: string | null, direction: 'asc' | 'desc'): any[] {\r\n    if (column) {\r\n      return data.sort((a, b) => {\r\n        const valueA = a[column];\r\n        const valueB = b[column];\r\n        if (direction === 'asc') {\r\n          return valueA > valueB ? 1 : -1;\r\n        } else {\r\n          return valueA < valueB ? 1 : -1;\r\n        }\r\n      });\r\n    }\r\n    this.sortColumn = column;\r\n    return data;\r\n  }\r\n\r\n  toggleSort(data: any[], column: string, secondaryColumn?: string): void {\r\n    if (column === this.sortColumn) {\r\n      this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\r\n    } else {\r\n      this.sortColumn = column;\r\n      this.sortDirection = 'desc';\r\n    }\r\n    \r\n    this.sort(data, column, this.sortDirection);\r\n  \r\n    if (secondaryColumn) {\r\n      this.sort(data, secondaryColumn, this.sortDirection);\r\n    }\r\n  }\r\n  \r\n  \r\n}","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-toast',\r\n  standalone: false,\r\n  template: `\r\n    <div *ngIf=\"isVisible\" id=\"toast\" class=\"toast fixed bottom-4 right-4 w-auto max-w-lg p-4 mb-4 flex items-center justify-between text-gray-500 bg-white rounded-lg shadow-lg dark:text-gray-400 dark:bg-gray-800\" role=\"alert\">\r\n      <!-- Success Icon -->\r\n      <div *ngIf=\"isSuccessful\" class=\"flex items-center justify-center flex-shrink-0 w-8 h-8 text-green-400 bg-green-100 rounded-lg dark:bg-green-800 dark:text-green-200 mr-3\">\r\n        <svg class=\"w-5 h-5\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n          <path d=\"M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z\"/>\r\n        </svg>\r\n      </div>\r\n\r\n      <!-- Error Icon -->\r\n      <div *ngIf=\"!isSuccessful\" class=\"flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-400 bg-red-100 rounded-lg dark:bg-red-800 dark:text-red-200 mr-3\">\r\n        <svg class=\"w-5 h-5\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n          <path d=\"M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z\"/>\r\n        </svg>\r\n      </div>\r\n\r\n      <!-- Toast Message -->\r\n      <div class=\"text-gray-800 toast-message flex-grow text-sm font-semibold max-w-60\">\r\n        {{ message }}\r\n      </div>\r\n\r\n      <!-- Close Button -->\r\n      <button type=\"button\" class=\"ms-3 -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700\" aria-label=\"Close\" (click)=\"dismissToast()\">\r\n        <span class=\"sr-only\">Close</span>\r\n        <svg class=\"w-3 h-3\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 14 14\">\r\n          <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6\"/>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  `,\r\n})\r\nexport class ToastComponent implements OnDestroy, OnInit {\r\n  @Input() message!: string;\r\n  @Input() isSuccessful: boolean = true;\r\n\r\n  isVisible: boolean = true; \r\n  timeoutHandle: any;\r\n\r\n  ngOnInit() {\r\n    this.autoDismiss();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.timeoutHandle) {\r\n      clearTimeout(this.timeoutHandle);\r\n    }\r\n  }\r\n\r\n  dismissToast() {\r\n    this.isVisible = false;\r\n  }\r\n\r\n  autoDismiss(timeout = 4500) {\r\n    this.timeoutHandle = setTimeout(() => this.dismissToast(), timeout);\r\n  }\r\n}\r\n","import { Injectable, ApplicationRef, Injector, createComponent } from '@angular/core';\r\nimport { ToastComponent } from '../components/toast/toast.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastService {\r\n  constructor(\r\n    private appRef: ApplicationRef,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  showToast(message: string, isSuccessful: boolean): void {\r\n    const componentRef = createComponent(ToastComponent, {\r\n      environmentInjector: this.appRef.injector\r\n    });\r\n    \r\n    componentRef.instance.message = message;\r\n    componentRef.instance.isSuccessful = isSuccessful;\r\n\r\n    this.appRef.attachView(componentRef.hostView);\r\n\r\n    const domElem = (componentRef.hostView as any).rootNodes[0] as HTMLElement;\r\n    document.body.appendChild(domElem);\r\n\r\n    setTimeout(() => {\r\n      this.dismissToast(componentRef, domElem);\r\n    }, 4500);\r\n  }\r\n\r\n  dismissToast(componentRef: any, domElem: HTMLElement): void {\r\n    this.appRef.detachView(componentRef.hostView);\r\n    domElem.remove();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}