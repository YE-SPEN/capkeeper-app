/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as fs from 'fs';
import { CookieJar, JSDOM } from 'jsdom';
import * as path from 'path';
import { URL } from 'url';
import { CustomResourceLoader } from './custom-resource-loader';
import { InlineCriticalCssProcessor } from './inline-css-processor';
import { augmentWindowWithStubs } from './stubs';
/**
 * @deprecated This experimental API will be removed in version 16.
 * @experimental
 */
export class Engine {
    constructor() {
        this.fileExistsCache = new Map();
        this.htmlFileCache = new Map();
        this.resourceLoaderCache = new Map();
        this.inlineCriticalCssProcessor = new InlineCriticalCssProcessor({ minify: true }, this.resourceLoaderCache);
    }
    async render(options) {
        const { pathname, origin } = new URL(options.url);
        const prerenderedSnapshot = await this.getPrerenderedSnapshot(options.publicPath, pathname);
        if (prerenderedSnapshot) {
            return prerenderedSnapshot;
        }
        let htmlContent = await this.getHtmlTemplate(options.publicPath, pathname, options.htmlFilename);
        const inlineCriticalCss = options.inlineCriticalCss !== false;
        const customResourceLoader = new CustomResourceLoader(options.headers, options.publicPath, origin, this.resourceLoaderCache);
        let dom;
        if (inlineCriticalCss) {
            // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64
            htmlContent = htmlContent.replace(/ media="print" onload="this\.media=['&apos;].+?['&apos;]"(?: ngCspMedia=".+")?><noscript><link .+?><\/noscript>/g, '>');
        }
        // JSDOM doesn't support type=module
        // https://github.com/jsdom/jsdom/issues/2475
        htmlContent = htmlContent.replace(/ type="module"/g, '');
        try {
            dom = new JSDOM(htmlContent, {
                runScripts: 'dangerously',
                resources: customResourceLoader,
                url: options.url,
                referrer: options.headers?.referrer,
                cookieJar: new CookieJar(undefined, {
                    allowSpecialUseDomain: true,
                }),
                beforeParse: (window) => {
                    augmentWindowWithStubs(window);
                    window.ngRenderMode = true;
                },
            });
            const doc = dom.window.document;
            // 60s timeout.
            const stablizationTimeout = setTimeout(() => {
                throw new Error('Angular application failed to stablize after in time.');
            }, 60000);
            const ngRenderMode = await new Promise((resolve) => {
                const interval = setInterval(() => {
                    const ngDOMMode = dom?.window.ngRenderMode;
                    if (ngDOMMode && typeof ngDOMMode === 'object') {
                        // Poll until ngDOMMode is an object.
                        clearTimeout(stablizationTimeout);
                        clearInterval(interval);
                        resolve(ngDOMMode);
                    }
                }, 30);
            });
            await ngRenderMode.getWhenStable();
            doc.querySelector('[ng-version]')?.setAttribute('ng-clover', '');
            // Add Angular state
            const state = ngRenderMode.getSerializedState();
            if (state) {
                const script = doc.createElement('script');
                script.id = `${ngRenderMode.appId}-state`;
                script.setAttribute('type', 'application/json');
                script.textContent = state;
                doc.body.appendChild(script);
            }
            const content = dom.serialize();
            if (!inlineCriticalCss) {
                return content;
            }
            const baseHref = doc.querySelector('base[href]')?.getAttribute('href') ?? '';
            const { content: contentWithInlineCSS, warnings, errors, } = await this.inlineCriticalCssProcessor.process(content, {
                outputPath: path.join(options.publicPath, baseHref),
            });
            // eslint-disable-next-line no-console
            warnings?.forEach((m) => console.warn(m));
            // eslint-disable-next-line no-console
            errors?.forEach((m) => console.error(m));
            return contentWithInlineCSS;
        }
        finally {
            dom?.window.close();
        }
    }
    async getPrerenderedSnapshot(publicPath, pathname) {
        // Remove leading forward slash.
        const pagePath = path.resolve(publicPath, pathname.substring(1), 'index.html');
        const content = await this.readHTMLFile(pagePath);
        return content?.includes('ng-version=')
            ? content // Page is pre-rendered
            : undefined;
    }
    async getHtmlTemplate(publicPath, pathname, htmlFilename = 'index.html') {
        const files = [path.join(publicPath, htmlFilename)];
        const potentialLocalePath = pathname.split('/', 2)[1]; // potential base href
        if (potentialLocalePath) {
            files.push(path.join(publicPath, potentialLocalePath, htmlFilename));
        }
        for (const file of files) {
            const content = await this.readHTMLFile(file);
            if (content) {
                return content;
            }
        }
        throw new Error(`Cannot file HTML file. Looked in: ${files.join(', ')}`);
    }
    async fileExists(filePath) {
        const fileExists = this.fileExistsCache.get(filePath);
        if (fileExists === undefined) {
            try {
                await fs.promises.access(filePath, fs.constants.F_OK);
                this.fileExistsCache.set(filePath, true);
                return true;
            }
            catch {
                this.fileExistsCache.set(filePath, false);
                return false;
            }
        }
        return fileExists;
    }
    async readHTMLFile(filePath) {
        if (this.htmlFileCache.has(filePath)) {
            return this.htmlFileCache.get(filePath);
        }
        if (await this.fileExists(filePath)) {
            const content = await fs.promises.readFile(filePath, 'utf-8');
            this.htmlFileCache.set(filePath, content);
            return content;
        }
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,