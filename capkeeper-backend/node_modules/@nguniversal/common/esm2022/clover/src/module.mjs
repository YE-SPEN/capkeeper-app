/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DOCUMENT, ɵPLATFORM_SERVER_ID as PLATFORM_SERVER_ID } from '@angular/common';
import { APP_ID, ApplicationRef, Inject, NgModule, Optional, PLATFORM_ID, TransferState, } from '@angular/core';
import { BrowserModule, ɵSharedStylesHost as SharedStylesHost } from '@angular/platform-browser';
import { filter, mapTo, take } from 'rxjs/operators';
import { SSRStylesHost } from './styles_host';
import * as i0 from "@angular/core";
/**
 * @deprecated This experimental API will be removed in version 16.
 * @experimental
 */
export class RendererModule {
    constructor(applicationRef, transferState, appId) {
        this.applicationRef = applicationRef;
        this.transferState = transferState;
        this.appId = appId;
        if (typeof ngRenderMode !== 'undefined' && ngRenderMode) {
            ngRenderMode = {
                getSerializedState: () => this.transferState ? escapeHtml(this.transferState.toJson()) : undefined,
                appId: this.appId,
                getWhenStable: () => this.applicationRef.isStable
                    .pipe(filter((isStable) => isStable), take(1), mapTo(undefined))
                    .toPromise(),
            };
        }
    }
    static forRoot() {
        return {
            ngModule: RendererModule,
            providers: [
                ...(typeof ngRenderMode !== 'undefined' && ngRenderMode
                    ? [
                        { provide: PLATFORM_ID, useValue: PLATFORM_SERVER_ID },
                        { provide: SSRStylesHost, useClass: SSRStylesHost, deps: [DOCUMENT, APP_ID] },
                    ]
                    : [{ provide: SSRStylesHost, useClass: SSRStylesHost, deps: [DOCUMENT] }]),
                { provide: SharedStylesHost, useExisting: SSRStylesHost },
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.0", ngImport: i0, type: RendererModule, deps: [{ token: i0.ApplicationRef }, { token: i0.TransferState, optional: true }, { token: APP_ID, optional: true }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.0", ngImport: i0, type: RendererModule, exports: [BrowserModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.0", ngImport: i0, type: RendererModule, imports: [BrowserModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.0", ngImport: i0, type: RendererModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [BrowserModule],
                    imports: [],
                    providers: [],
                }]
        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i0.TransferState, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [APP_ID]
                }] }]; } });
function escapeHtml(text) {
    const escapedText = {
        '&': '&a;',
        '"': '&q;',
        "'": '&s;',
        '<': '&l;',
        '>': '&g;',
    };
    return text.replace(/[&"'<>]/g, (s) => escapedText[s]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9jb21tb24vY2xvdmVyL3NyYy9tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsSUFBSSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RGLE9BQU8sRUFDTCxNQUFNLEVBQ04sY0FBYyxFQUNkLE1BQU0sRUFFTixRQUFRLEVBQ1IsUUFBUSxFQUNSLFdBQVcsRUFDWCxhQUFhLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsSUFBSSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBVTlDOzs7R0FHRztBQU9ILE1BQU0sT0FBTyxjQUFjO0lBQ3pCLFlBQ1UsY0FBOEIsRUFDbEIsYUFBNkIsRUFDYixLQUFjO1FBRjFDLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUNsQixrQkFBYSxHQUFiLGFBQWEsQ0FBZ0I7UUFDYixVQUFLLEdBQUwsS0FBSyxDQUFTO1FBRWxELElBQUksT0FBTyxZQUFZLEtBQUssV0FBVyxJQUFJLFlBQVksRUFBRTtZQUN2RCxZQUFZLEdBQUc7Z0JBQ2Isa0JBQWtCLEVBQUUsR0FBRyxFQUFFLENBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7Z0JBQzFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsYUFBYSxFQUFFLEdBQUcsRUFBRSxDQUNsQixJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVE7cUJBQ3pCLElBQUksQ0FDSCxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUM5QixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUNqQjtxQkFDQSxTQUFTLEVBQUU7YUFDakIsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPO1FBQ1osT0FBTztZQUNMLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFNBQVMsRUFBRTtnQkFDVCxHQUFHLENBQUMsT0FBTyxZQUFZLEtBQUssV0FBVyxJQUFJLFlBQVk7b0JBQ3JELENBQUMsQ0FBQzt3QkFDRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFO3dCQUN0RCxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7cUJBQzlFO29CQUNILENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDNUUsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRTthQUMxRDtTQUNGLENBQUM7SUFDSixDQUFDOzhHQXBDVSxjQUFjLDZGQUlILE1BQU07K0dBSmpCLGNBQWMsWUFKZixhQUFhOytHQUlaLGNBQWMsWUFKZixhQUFhOzsyRkFJWixjQUFjO2tCQUwxQixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQztvQkFDeEIsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsU0FBUyxFQUFFLEVBQUU7aUJBQ2Q7OzBCQUlJLFFBQVE7OzBCQUNSLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsTUFBTTs7QUFtQzlCLFNBQVMsVUFBVSxDQUFDLElBQVk7SUFDOUIsTUFBTSxXQUFXLEdBQTRCO1FBQzNDLEdBQUcsRUFBRSxLQUFLO1FBQ1YsR0FBRyxFQUFFLEtBQUs7UUFDVixHQUFHLEVBQUUsS0FBSztRQUNWLEdBQUcsRUFBRSxLQUFLO1FBQ1YsR0FBRyxFQUFFLEtBQUs7S0FDWCxDQUFDO0lBRUYsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBET0NVTUVOVCwgybVQTEFURk9STV9TRVJWRVJfSUQgYXMgUExBVEZPUk1fU0VSVkVSX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIEFQUF9JRCxcbiAgQXBwbGljYXRpb25SZWYsXG4gIEluamVjdCxcbiAgTW9kdWxlV2l0aFByb3ZpZGVycyxcbiAgTmdNb2R1bGUsXG4gIE9wdGlvbmFsLFxuICBQTEFURk9STV9JRCxcbiAgVHJhbnNmZXJTdGF0ZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCcm93c2VyTW9kdWxlLCDJtVNoYXJlZFN0eWxlc0hvc3QgYXMgU2hhcmVkU3R5bGVzSG9zdCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXBUbywgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFNTUlN0eWxlc0hvc3QgfSBmcm9tICcuL3N0eWxlc19ob3N0JztcblxuZXhwb3J0IGludGVyZmFjZSBOR1JlbmRlck1vZGVBUEkge1xuICBnZXRTZXJpYWxpemVkU3RhdGU6ICgpID0+IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgZ2V0V2hlblN0YWJsZTogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgYXBwSWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIE5HUmVuZGVyTW9kZSA9IGJvb2xlYW4gfCB1bmRlZmluZWQgfCBOR1JlbmRlck1vZGVBUEk7XG5kZWNsYXJlIGxldCBuZ1JlbmRlck1vZGU6IE5HUmVuZGVyTW9kZTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBleHBlcmltZW50YWwgQVBJIHdpbGwgYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uIDE2LlxuICogQGV4cGVyaW1lbnRhbFxuICovXG5cbkBOZ01vZHVsZSh7XG4gIGV4cG9ydHM6IFtCcm93c2VyTW9kdWxlXSxcbiAgaW1wb3J0czogW10sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIFJlbmRlcmVyTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhcHBsaWNhdGlvblJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSB0cmFuc2ZlclN0YXRlPzogVHJhbnNmZXJTdGF0ZSxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEFQUF9JRCkgcHJpdmF0ZSBhcHBJZD86IHN0cmluZyxcbiAgKSB7XG4gICAgaWYgKHR5cGVvZiBuZ1JlbmRlck1vZGUgIT09ICd1bmRlZmluZWQnICYmIG5nUmVuZGVyTW9kZSkge1xuICAgICAgbmdSZW5kZXJNb2RlID0ge1xuICAgICAgICBnZXRTZXJpYWxpemVkU3RhdGU6ICgpID0+XG4gICAgICAgICAgdGhpcy50cmFuc2ZlclN0YXRlID8gZXNjYXBlSHRtbCh0aGlzLnRyYW5zZmVyU3RhdGUudG9Kc29uKCkpIDogdW5kZWZpbmVkLFxuICAgICAgICBhcHBJZDogdGhpcy5hcHBJZCxcbiAgICAgICAgZ2V0V2hlblN0YWJsZTogKCkgPT5cbiAgICAgICAgICB0aGlzLmFwcGxpY2F0aW9uUmVmLmlzU3RhYmxlXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgZmlsdGVyKChpc1N0YWJsZSkgPT4gaXNTdGFibGUpLFxuICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICBtYXBUbyh1bmRlZmluZWQpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnRvUHJvbWlzZSgpLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFJlbmRlcmVyTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBSZW5kZXJlck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAuLi4odHlwZW9mIG5nUmVuZGVyTW9kZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbmdSZW5kZXJNb2RlXG4gICAgICAgICAgPyBbXG4gICAgICAgICAgICAgIHsgcHJvdmlkZTogUExBVEZPUk1fSUQsIHVzZVZhbHVlOiBQTEFURk9STV9TRVJWRVJfSUQgfSxcbiAgICAgICAgICAgICAgeyBwcm92aWRlOiBTU1JTdHlsZXNIb3N0LCB1c2VDbGFzczogU1NSU3R5bGVzSG9zdCwgZGVwczogW0RPQ1VNRU5ULCBBUFBfSURdIH0sXG4gICAgICAgICAgICBdXG4gICAgICAgICAgOiBbeyBwcm92aWRlOiBTU1JTdHlsZXNIb3N0LCB1c2VDbGFzczogU1NSU3R5bGVzSG9zdCwgZGVwczogW0RPQ1VNRU5UXSB9XSksXG4gICAgICAgIHsgcHJvdmlkZTogU2hhcmVkU3R5bGVzSG9zdCwgdXNlRXhpc3Rpbmc6IFNTUlN0eWxlc0hvc3QgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlc2NhcGVIdG1sKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGVzY2FwZWRUZXh0OiB7IFtrOiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgICAnJic6ICcmYTsnLFxuICAgICdcIic6ICcmcTsnLFxuICAgIFwiJ1wiOiAnJnM7JyxcbiAgICAnPCc6ICcmbDsnLFxuICAgICc+JzogJyZnOycsXG4gIH07XG5cbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvWyZcIic8Pl0vZywgKHMpID0+IGVzY2FwZWRUZXh0W3NdKTtcbn1cbiJdfQ==