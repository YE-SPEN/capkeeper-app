/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DOCUMENT, ɵgetDOM as getDOM } from '@angular/common';
import { APP_ID, Inject, Injectable, Optional } from '@angular/core';
import { ɵSharedStylesHost as SharedStylesHost } from '@angular/platform-browser';
import * as i0 from "@angular/core";
export class SSRStylesHost extends SharedStylesHost {
    constructor(document, applicationId = '') {
        super(document, applicationId);
        this.document = document;
        this.applicationId = applicationId;
        this._styleNodes = new Set();
        this.head = this.document.querySelector('head');
        const styles = this.head?.querySelectorAll(`style[ng-style='${this.applicationId}']`);
        if (styles?.length) {
            const items = Array.from(styles);
            this._styleNodesInDOM = new Map(items.map((el) => [el.textContent, el]));
        }
    }
    _addStyle(style) {
        const element = this._styleNodesInDOM?.get(style);
        if (element) {
            if (typeof ngDevMode !== 'undefined' && ngDevMode) {
                element.setAttribute('_ng-style-re-used', '');
            }
            this._styleNodesInDOM?.delete(style);
            this._styleNodes.add(element);
            return;
        }
        const el = getDOM().createElement('style');
        el.textContent = style;
        if (this.applicationId) {
            el.setAttribute('ng-style', this.applicationId);
        }
        if (this.head) {
            this.head.appendChild(el);
        }
        this._styleNodes.add(el);
    }
    onStylesAdded(additions) {
        additions.forEach((style) => this._addStyle(style));
    }
    addHost(_hostNode) {
        // stub
    }
    removeHost(_hostNode) {
        // stub
    }
    ngOnDestroy() {
        this._styleNodes.forEach((styleNode) => styleNode.remove());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.0", ngImport: i0, type: SSRStylesHost, deps: [{ token: DOCUMENT }, { token: APP_ID, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.0", ngImport: i0, type: SSRStylesHost }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.0", ngImport: i0, type: SSRStylesHost, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [APP_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzX2hvc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2NvbW1vbi9jbG92ZXIvc3JjL3N0eWxlc19ob3N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBYSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLGlCQUFpQixJQUFJLGdCQUFnQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0FBS2xGLE1BQU0sT0FBTyxhQUFjLFNBQVEsZ0JBQWdCO0lBS2pELFlBQ3FDLFFBQWtCLEVBQ1IsZ0JBQXdCLEVBQUU7UUFFdkUsS0FBSyxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUhJLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDUixrQkFBYSxHQUFiLGFBQWEsQ0FBYTtRQUxqRSxnQkFBVyxHQUFHLElBQUksR0FBRyxFQUFlLENBQUM7UUFRM0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLG1CQUFtQixJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsQ0FBQztRQUN0RixJQUFJLE1BQU0sRUFBRSxNQUFNLEVBQUU7WUFDbEIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQWtCLENBQUM7WUFDbEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUU7SUFDSCxDQUFDO0lBRU8sU0FBUyxDQUFDLEtBQWE7UUFDN0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRCxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsRUFBRTtnQkFDakQsT0FBTyxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUMvQztZQUVELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFOUIsT0FBTztTQUNSO1FBRUQsTUFBTSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNDLEVBQUUsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBRXZCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDakQ7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMzQjtRQUVELElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxhQUFhLENBQUMsU0FBc0I7UUFDbEMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxPQUFPLENBQUMsU0FBZTtRQUNyQixPQUFPO0lBQ1QsQ0FBQztJQUVELFVBQVUsQ0FBQyxTQUFlO1FBQ3hCLE9BQU87SUFDVCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM5RCxDQUFDOzhHQTNEVSxhQUFhLGtCQU1kLFFBQVEsYUFDSSxNQUFNO2tIQVBqQixhQUFhOzsyRkFBYixhQUFhO2tCQUR6QixVQUFVOzswQkFPTixNQUFNOzJCQUFDLFFBQVE7OzBCQUNmLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBET0NVTUVOVCwgybVnZXRET00gYXMgZ2V0RE9NIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEFQUF9JRCwgSW5qZWN0LCBJbmplY3RhYmxlLCBPbkRlc3Ryb3ksIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyDJtVNoYXJlZFN0eWxlc0hvc3QgYXMgU2hhcmVkU3R5bGVzSG9zdCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5kZWNsYXJlIGxldCBuZ0Rldk1vZGU6IGJvb2xlYW4gfCB7fSB8IHVuZGVmaW5lZDtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNTUlN0eWxlc0hvc3QgZXh0ZW5kcyBTaGFyZWRTdHlsZXNIb3N0IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBoZWFkOiBIVE1MSGVhZEVsZW1lbnQgfCBudWxsO1xuICBwcml2YXRlIF9zdHlsZU5vZGVzID0gbmV3IFNldDxIVE1MRWxlbWVudD4oKTtcbiAgcHJpdmF0ZSBfc3R5bGVOb2Rlc0luRE9NOiBNYXA8c3RyaW5nIHwgbnVsbCwgSFRNTEVsZW1lbnQ+IHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgcmVhZG9ubHkgZG9jdW1lbnQ6IERvY3VtZW50LFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoQVBQX0lEKSBwcml2YXRlIHJlYWRvbmx5IGFwcGxpY2F0aW9uSWQ6IHN0cmluZyA9ICcnLFxuICApIHtcbiAgICBzdXBlcihkb2N1bWVudCwgYXBwbGljYXRpb25JZCk7XG4gICAgdGhpcy5oZWFkID0gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG4gICAgY29uc3Qgc3R5bGVzID0gdGhpcy5oZWFkPy5xdWVyeVNlbGVjdG9yQWxsKGBzdHlsZVtuZy1zdHlsZT0nJHt0aGlzLmFwcGxpY2F0aW9uSWR9J11gKTtcbiAgICBpZiAoc3R5bGVzPy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGl0ZW1zID0gQXJyYXkuZnJvbShzdHlsZXMpIGFzIEhUTUxFbGVtZW50W107XG4gICAgICB0aGlzLl9zdHlsZU5vZGVzSW5ET00gPSBuZXcgTWFwKGl0ZW1zLm1hcCgoZWwpID0+IFtlbC50ZXh0Q29udGVudCwgZWxdKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfYWRkU3R5bGUoc3R5bGU6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9zdHlsZU5vZGVzSW5ET00/LmdldChzdHlsZSk7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgbmdEZXZNb2RlICE9PSAndW5kZWZpbmVkJyAmJiBuZ0Rldk1vZGUpIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ19uZy1zdHlsZS1yZS11c2VkJywgJycpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zdHlsZU5vZGVzSW5ET00/LmRlbGV0ZShzdHlsZSk7XG4gICAgICB0aGlzLl9zdHlsZU5vZGVzLmFkZChlbGVtZW50KTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGVsID0gZ2V0RE9NKCkuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBlbC50ZXh0Q29udGVudCA9IHN0eWxlO1xuXG4gICAgaWYgKHRoaXMuYXBwbGljYXRpb25JZCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCduZy1zdHlsZScsIHRoaXMuYXBwbGljYXRpb25JZCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGVhZCkge1xuICAgICAgdGhpcy5oZWFkLmFwcGVuZENoaWxkKGVsKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdHlsZU5vZGVzLmFkZChlbCk7XG4gIH1cblxuICBvblN0eWxlc0FkZGVkKGFkZGl0aW9uczogU2V0PHN0cmluZz4pIHtcbiAgICBhZGRpdGlvbnMuZm9yRWFjaCgoc3R5bGUpID0+IHRoaXMuX2FkZFN0eWxlKHN0eWxlKSk7XG4gIH1cblxuICBhZGRIb3N0KF9ob3N0Tm9kZTogTm9kZSk6IHZvaWQge1xuICAgIC8vIHN0dWJcbiAgfVxuXG4gIHJlbW92ZUhvc3QoX2hvc3ROb2RlOiBOb2RlKTogdm9pZCB7XG4gICAgLy8gc3R1YlxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fc3R5bGVOb2Rlcy5mb3JFYWNoKChzdHlsZU5vZGUpID0+IHN0eWxlTm9kZS5yZW1vdmUoKSk7XG4gIH1cbn1cbiJdfQ==