{"version":3,"file":"common.mjs","sources":["../../../../../../modules/common/src/transfer_http.ts","../../../../../../modules/common/src/state-transfer-initializer/module.ts","../../../../../../modules/common/common.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  HTTP_INTERCEPTORS,\n  HttpEvent,\n  HttpHandler,\n  HttpHeaders,\n  HttpInterceptor,\n  HttpParams,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport {\n  ApplicationRef,\n  Injectable,\n  NgModule,\n  StateKey,\n  TransferState,\n  makeStateKey,\n} from '@angular/core';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { defaultIfEmpty, first, tap } from 'rxjs/operators';\n\ntype ResponseType = HttpRequest<unknown>['responseType'];\n\ninterface TransferHttpResponse {\n  body: any;\n  headers: Record<string, string[]>;\n  status?: number;\n  statusText?: string;\n  url?: string;\n  responseType?: ResponseType;\n}\n\nfunction getHeadersMap(headers: HttpHeaders): Record<string, string[]> {\n  const headersMap: Record<string, string[]> = {};\n  for (const key of headers.keys()) {\n    const values = headers.getAll(key);\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n\n  return headersMap;\n}\n\n/**\n * @deprecated Use `provideClientHydration` instead which caches HTTP requests by default.\n * @see https://angular.io/api/platform-browser/provideClientHydration\n */\n@Injectable()\nexport class TransferHttpCacheInterceptor implements HttpInterceptor {\n  private isCacheActive = true;\n\n  private makeCacheKey(\n    method: string,\n    url: string,\n    params: HttpParams,\n    responseType: ResponseType,\n  ): StateKey<TransferHttpResponse> {\n    // make the params encoded same as a url so it's easy to identify\n    const encodedParams = params\n      .keys()\n      .sort()\n      .map((k) => `${k}=${params.getAll(k)}`)\n      .join('&');\n\n    const key = (method === 'GET' ? 'G.' : 'H.') + responseType + '.' + url + '?' + encodedParams;\n\n    return makeStateKey<TransferHttpResponse>(key);\n  }\n\n  constructor(appRef: ApplicationRef, private transferState: TransferState) {\n    // Stop using the cache if the application has stabilized, indicating initial rendering is\n    // complete.\n    appRef.isStable\n      .pipe(\n        first((isStable) => isStable),\n        defaultIfEmpty(false),\n      )\n      .subscribe(() => {\n        this.isCacheActive = false;\n      });\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (!this.isCacheActive || (req.method !== 'GET' && req.method !== 'HEAD')) {\n      // Cache is no longer active or method is not HEAD or GET.\n      // Pass the request through.\n      return next.handle(req);\n    }\n\n    const storeKey = this.makeCacheKey(req.method, req.url, req.params, req.responseType);\n\n    if (this.transferState.hasKey(storeKey)) {\n      // Request found in cache. Respond using it.\n      const response = this.transferState.get(storeKey, null);\n      let body: ArrayBuffer | Blob | string | undefined = response?.body;\n\n      switch (response?.responseType) {\n        case 'arraybuffer':\n          body = new TextEncoder().encode(response.body).buffer;\n          break;\n        case 'blob':\n          body = new Blob([response.body]);\n          break;\n      }\n\n      return observableOf(\n        new HttpResponse<any>({\n          body,\n          headers: new HttpHeaders(response?.headers),\n          status: response?.status,\n          statusText: response?.statusText,\n          url: response?.url,\n        }),\n      );\n    } else {\n      // Request not found in cache. Make the request and cache it.\n      const httpEvent = next.handle(req);\n\n      return httpEvent.pipe(\n        tap((event: HttpEvent<unknown>) => {\n          if (event instanceof HttpResponse) {\n            this.transferState.set<TransferHttpResponse>(storeKey, {\n              body: event.body,\n              headers: getHeadersMap(event.headers),\n              status: event.status,\n              statusText: event.statusText,\n              url: event.url || '',\n              responseType: req.responseType,\n            });\n          }\n        }),\n      );\n    }\n  }\n}\n\n/**\n * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP\n * calls from the server to the client application.\n */\n@NgModule({\n  providers: [\n    ApplicationRef,\n    TransferState,\n    TransferHttpCacheInterceptor,\n    { provide: HTTP_INTERCEPTORS, useExisting: TransferHttpCacheInterceptor, multi: true },\n  ],\n})\nexport class TransferHttpCacheModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { DOCUMENT } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\n\n/**\n * @deprecated Use `provideClientHydration` instead which caches HTTP requests by default.\n * @see https://angular.io/api/platform-browser/provideClientHydration\n */\nexport function domContentLoadedFactory(doc: Document): () => Promise<void> {\n  return () =>\n    new Promise((resolve, _reject) => {\n      if (doc.readyState === 'complete' || doc.readyState === 'interactive') {\n        resolve();\n\n        return;\n      }\n\n      const contentLoaded = () => {\n        doc.removeEventListener('DOMContentLoaded', contentLoaded);\n        resolve();\n      };\n\n      doc.addEventListener('DOMContentLoaded', contentLoaded);\n    });\n}\n\n/**\n * @deprecated Use `provideClientHydration` instead which caches HTTP requests by default.\n * @see https://angular.io/api/platform-browser/provideClientHydration\n */\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: domContentLoadedFactory,\n      deps: [DOCUMENT],\n    },\n  ],\n})\nexport class StateTransferInitializerModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["observableOf"],"mappings":"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"}